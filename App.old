// Exercice 1 : todo list
// import React, { useState } from "react";
// import { SafeAreaView, FlatList, StyleSheet, View } from "react-native";
// import { TextInput, Button, List, Title } from "react-native-paper";
// import Icon from 'react-native-vector-icons/MaterialIcons';


// const App = ()=>{
//   const [task, setTask] = useState('');
//   const [tasks, setTasks] = useState([]);

//   const addTask = ()=>{
//     if(task.length>0){
//       setTasks([...tasks, {id: tasks.length + 1,name: task}]);
//       setTask('');
//     }
//   };

//   const deleteTask = (id)=>{
//     setTasks(tasks.filter((task)=>task.id !== id));
//   };

//   return (
//     <SafeAreaView style={styles.container}>
//       <Title style={styles.title}>Todo List</Title>
//       <TextInput
//         label="Nouvelle tâche"
//         value={task}
//         onChangeText={(text)=>setTask(text)}
//         mode="outlined"
//         style={styles.input}
//       />
//       <Button mode="contained" onPress={addTask} style={styles.addButton} >
//         Ajouter une tâche
//       </Button>
//       <FlatList
//         data={tasks}
//         keyExtractor={(item)=>item.id.toString()}
//         renderItem={({item})=> (
//           <List.Item
//           title={item.name}
//           right={()=>(
//             <Icon
//               name="delete"
//               size={24}
//               color="red"
//               onPress={()=>{deleteTask(item.id)}}
//             />
//           )}
//           />
//         )}
//       />
//     </SafeAreaView>
//   );

// };



// exercice 2 : todo list via API

import React, { useEffect, useState } from "react";
import { FlatList, SafeAreaView, StyleSheet, View } from "react-native";
import { ActivityIndicator, Text, List, Appbar, FAB, Title, TextInput, Button } from "react-native-paper";
import Icon from "react-native-vector-icons/MaterialIcons";


const App = ()=>{
  const [todo, setTodo] = useState('');
  const [todos, setTodos] = useState([]);
  const [loading, setLoading] = useState(true);

  const addTodo = ()=>{
    if(todo.length>0){
      setTodos([...todos, {id: todos.length + 1,title: todo}]);
      setTodo('');
    }
  };
    const deleteTodo = (id)=>{
    setTodos(todos.filter((todo)=>todo.id !== id));
  };


  // Fonction pour recuperer les données depuis l'API JSONPlacholder
  const fetchTodos = async()=>{
    try{
      const response = await fetch('https://jsonplaceholder.typicode.com/todos');
      const data = await response.json();
      setTodos(data);
      setLoading(false);
    } catch(error){
      console.error('Erreur lors de a récupération des données',error);
      setLoading(false);
    }
  };

  // utiliser useEffect() pour récupérer les données lors du montage du composant

  useEffect(()=>{
    fetchTodos();
  },[]);

  if(loading){
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator animating={true} size="large" />
      </View>
    );
  }

    return (
    <SafeAreaView style={styles.container}>
      <Title style={styles.title}>Todo List</Title>
      <TextInput
        label="Nouvelle tâche"
        value={todo}
        onChangeText={(text)=>setTodo(text)}
        mode="outlined"
        style={styles.input}
      />
      <Button mode="contained" onPress={addTodo} style={styles.addButton} >
        Ajouter une tâche
      </Button>
      <FlatList
        data={todos}
        keyExtractor={(item)=>item.id.toString()}
        renderItem={({item})=> (
          <List.Item
          title={item.title}
          right={()=>(
            <Icon
              name="delete"
              size={24}
              color="red"
              onPress={()=>{deleteTodo(item.id)}}
            />
          )}
          />
        )}
      />


    </SafeAreaView>
  );


};


// ****************************************************************
// ****************************************************************

const styles = StyleSheet.create({
  container:{
    flex:1,
    padding:16,
    backgroundColor:'#fff',
  },
  title:{
    textAlign:'center',
    marginVertical:16,
  },
  input:{
    marginBottom:16,
  },
  addButton:{
    marginBottom:16,
  },
});

export default App;